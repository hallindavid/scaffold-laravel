"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const child_process_1 = __importDefault(require("child_process"));
const state_1 = require("./state");
const config_1 = require("./config");
const request = __importStar(require("./request"));
const types_1 = require("./types");
const pExec = util_1.default.promisify(child_process_1.default.exec);
async function exec(command) {
    try {
        return pExec(command);
    }
    catch (err) {
        return err;
    }
}
exports.exec = exec;
function getHostOS() {
    return process.env.OPS_HOST_PLATFORM || 'unknown';
}
exports.getHostOS = getHostOS;
function getInterfaceType() {
    return process.env.SDK_INTERFACE_TYPE || types_1.Interfaces.Terminal;
}
exports.getInterfaceType = getInterfaceType;
function homeDir() {
    return process.env.SDK_HOME_DIR || '/root';
}
exports.homeDir = homeDir;
function log(...args) {
    console.log(...args);
}
exports.log = log;
function getStatePath() {
    return path_1.default.resolve(process.env.SDK_STATE_DIR || '');
}
exports.getStatePath = getStatePath;
function getConfigPath() {
    return path_1.default.resolve(process.env.SDK_CONFIG_DIR || '');
}
exports.getConfigPath = getConfigPath;
async function setState(key, value) {
    const state = new state_1.State(getStatePath());
    await state.set(key, value);
}
exports.setState = setState;
async function getState(key) {
    const state = new state_1.State(getStatePath());
    return await state.get(key);
}
exports.getState = getState;
async function setConfig(key, value) {
    const config = new config_1.Config(getConfigPath());
    await config.set(key, value);
}
exports.setConfig = setConfig;
async function getConfig(key) {
    const config = new config_1.Config(getConfigPath());
    return await config.get(key);
}
exports.getConfig = getConfig;
async function getSecret(key) {
    return await request.getSecret(key);
}
exports.getSecret = getSecret;
async function setSecret(key, value) {
    return await request.setSecret(key, value);
}
exports.setSecret = setSecret;
// We expect to add an 'event' field soon
async function track(tags, metadata) {
    try {
        await request.track(Object.assign({ tags: Array.isArray(tags) ? tags : [tags] }, metadata));
    }
    catch (e) {
        // Do something with this error eventually
    }
}
exports.track = track;
